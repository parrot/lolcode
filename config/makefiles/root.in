# Copyright (C) 2008-2009, Parrot Foundation.
## $Id: root.in 36930 2009-02-22 10:10:01Z barney $

## arguments we want to run parrot with
PARROT_ARGS =

## configuration settings
BUILD_DIR     = @build_dir@
LOAD_EXT      = @load_ext@
O             = @o@
EXE           = @exe@

## Setup some commands
PERL          = @perl@
RM_RF         = @rm_rf@
PARROT        = ../../parrot$(EXE)
CAT           = @cat@
BUILD_DYNPMC  = $(PERL) $(BUILD_DIR)/tools/build/dynpmc.pl
#CONDITIONED_LINE(darwin):
#CONDITIONED_LINE(darwin):# MACOSX_DEPLOYMENT_TARGET must be defined for OS X compilation/linking
#CONDITIONED_LINE(darwin):export MACOSX_DEPLOYMENT_TARGET := @osx_version@

## places to look for things
PARROT_DYNEXT = $(BUILD_DIR)/runtime/parrot/dynext
PGE_LIBRARY   = $(BUILD_DIR)/runtime/parrot/library/PGE
PERL6GRAMMAR  = $(PGE_LIBRARY)/Perl6Grammar.pbc
NQP           = $(BUILD_DIR)/compilers/nqp/nqp.pbc
PCT           = $(BUILD_DIR)/runtime/parrot/library/PCT.pbc
PBC_TO_EXE    = $(BUILD_DIR)/pbc_to_exe$(EXE)

PMC_DIR       = src/pmc

all: lolcode.pbc

LOLCODE_GROUP = $(PMC_DIR)/lolcode_group$(LOAD_EXT)

SOURCES = lolcode.pir \
  src/gen_grammar.pir \
  src/gen_actions.pir \
  src/gen_builtins.pir \
  src/parser/yarn_literal.pir \
#  $(LOLCODE_GROUP)

BUILTINS_PIR = \
  src/builtins/say.pir \
  src/builtins/expr_parse.pir \
  src/builtins/math.pir \
  src/builtins/cmp.pir

# PMCS = lolcode
# PMC_SOURCES = $(PMC_DIR)/lolcode.pmc

lolcode$(EXE): lolcode.pbc
	$(PBC_TO_EXE) lolcode.pbc

installable_lolcode$(EXE): lolcode.pbc
	$(PBC_TO_EXE) lolcode.pbc --install

# the default target
lolcode.pbc: $(PARROT) $(SOURCES)
	$(PARROT) $(PARROT_ARGS) -o lolcode.pbc lolcode.pir

src/gen_grammar.pir: $(PERL6GRAMMAR) src/parser/grammar.pg
	$(PARROT) $(PARROT_ARGS) $(PERL6GRAMMAR) \
	    --output=src/gen_grammar.pir \
	    src/parser/grammar.pg

src/gen_actions.pir: $(NQP) $(PCT) src/parser/actions.pm
	$(PARROT) $(PARROT_ARGS) $(NQP) --output=src/gen_actions.pir \
	    --target=pir src/parser/actions.pm

src/gen_builtins.pir: $(BUILTINS_PIR)
	$(CAT) $(BUILTINS_PIR) >src/gen_builtins.pir

$(LOLCODE_GROUP): $(PARROT) $(PMC_SOURCES)
	cd $(PMC_DIR) && $(BUILD_DYNPMC) generate $(PMCS)
	cd $(PMC_DIR) && $(BUILD_DYNPMC) compile $(PMCS)
	cd $(PMC_DIR) && $(BUILD_DYNPMC) linklibs $(PMCS)
	cd $(PMC_DIR) && $(BUILD_DYNPMC) copy --destination=$(PARROT_DYNEXT) $(PMCS)

# regenerate the Makefile
Makefile: config/makefiles/root.in
	$(PERL) Configure.pl

# This is a listing of all targets, that are meant to be called by users
help:
	@echo ""
	@echo "Following targets are available for the user:"
	@echo ""
	@echo "  all:               lolcode.pbc"
	@echo "                     This is the default."
	@echo "Testing:"
	@echo "  test:              Run the test suite."
	@echo "  testclean:         Clean up test results."
	@echo ""
	@echo "Cleaning:"
	@echo "  clean:             Basic cleaning up."
	@echo "  realclean:         Removes also files generated by 'Configure.pl'"
	@echo "  distclean:         Removes also anything built, in theory"
	@echo ""
	@echo "Misc:"
	@echo "  help:              Print this help message."
	@echo ""

test: all
	$(PERL) t/harness

# this target has nothing to do
testclean:

CLEANUPS = \
  lolcode.pbc \
  lolcode.c \
  lolcode.ilk \
  *.manifest \
  *.pdb \
  lolcode$(O) \
  lolcode$(EXE) \
  installable_lolcode$(EXE) \
  src/gen_grammar.pir \
  src/gen_actions.pir \
  src/gen_builtins.pir \
  $(PMC_DIR)/*.h \
  $(PMC_DIR)/*.c \
  $(PMC_DIR)/*.dump \
  $(PMC_DIR)/*$(O) \
  $(PMC_DIR)/*$(LOAD_EXT) \
  $(PMC_DIR)/*.exp \
  $(PMC_DIR)/*.ilk \
  $(PMC_DIR)/*.manifest \
  $(PMC_DIR)/*.pdb \
  $(PMC_DIR)/*.lib \


clean:
	$(RM_RF) $(CLEANUPS)

realclean: clean
	$(RM_RF) Makefile

distclean: realclean

# Local variables:
#   mode: makefile
# End:
# vim: ft=make:
